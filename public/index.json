[
{
	"uri": "//localhost:1313/1-create-lambda-function/",
	"title": "CREATING A LAMBDA FUNCTION",
	"tags": [],
	"description": "",
	"content": "CREATING A LAMBDA FUNCTION Overview In this section, you will learn how to create an AWS Lambda function. AWS Lambda allows you to run code in response to events without provisioning or managing servers. This step is crucial as it will enable you to process the requests that come from your API Gateway.\nWhat is AWS Lambda? AWS Lambda is a serverless computing service provided by AWS that executes your code only when needed and scales automatically. It eliminates the need to manage infrastructure, allowing you to focus solely on your code. Lambda functions can be triggered by various AWS services, such as API Gateway, S3, DynamoDB, and more.\nCreating a Lambda Function Log in to the AWS Management Console: Go to the AWS Management Console and sign in with your credentials. Navigate to the Lambda Service: In the AWS Management Console, search for and select Lambda from the list of services. Create a New Lambda Function: Click the Create function button. Choose Author from scratch. This option lets you start with a blank function. Enter a name for your function in the Function name field. For example, MyApiLambdaFunction. Select a runtime for your function from the Runtime dropdown. You can choose from various languages such as Node.js, Python, Java, and more. Under Permissions, choose Create a new role with basic Lambda permissions to allow Lambda to execute your code and write logs to CloudWatch. Write or Upload Your Code:\nIn the Function code section, you should see the code editor where you can edit your Lambda function\u0026rsquo;s code. If the index.mjs tab is not visible in the code editor, select it from the file explorer. This file contains the code for your Lambda function. Paste the following code into the index.mjs tab, replacing any existing code: export const handler = async (event, context) =\u0026gt; { const length = event.length; const width = event.width; let area = calculateArea(length, width); console.log(`The area is ${area}`); console.log(\u0026#39;CloudWatch log group: \u0026#39;, context.logGroupName); let data = { \u0026#34;area\u0026#34;: area, }; return JSON.stringify(data); function calculateArea(length, width) { return length * width; } }; Click Deploy to update your function\u0026rsquo;s code. Once Lambda has successfully deployed the changes, you will see a banner confirming that your function has been updated. Configure Function Settings:\nSet up your function’s Handler (for example, index.handler for Node.js). Adjust Memory and Timeout settings as needed, depending on the requirements of your function. Test Your Lambda Function:\nTo invoke your Lambda function using the console, you first need to create a test event:\nIn the Code source pane of the Lambda console, click Test. Select Create new event. For Event name, enter myTestEvent. In the Event JSON panel, replace the default values with the following: { \u0026#34;length\u0026#34;: 6, \u0026#34;width\u0026#34;: 7 } Click Save to create the test event. To run the test and view the results:\nIn the Code source pane, click Test again. After the function executes, you will see the response and logs displayed in the Execution results tab. The expected results should be similar to: Test Event Name: myTestEvent\rResponse:\r\u0026#34;{\\\u0026#34;area\\\u0026#34;:42}\u0026#34;\rFunction Logs:\rSTART RequestId: 5c012b0a-18f7-4805-b2f6-40912935034a Version: $LATEST\r2023-08-31T23:39:45.313Z 5c012b0a-18f7-4805-b2f6-40912935034a INFO The area is 42\r2023-08-31T23:39:45.331Z 5c012b0a-18f7-4805-b2f6-40912935034a INFO CloudWatch log group: /aws/lambda/myLambdaFunction\rEND RequestId: 5c012b0a-18f7-4805-b2f6-40912935034a\rREPORT RequestId: 5c012b0a-18f7-4805-b2f6-40912935034a Duration: 20.67 ms Billed Duration: 21 ms Memory Size: 128 MB Max Memory Used: 66 MB Init Duration: 163.87 ms To view the invocation records in CloudWatch Logs:\nOpen the Log groups page of the CloudWatch console. Select the log group for your function, which is /aws/lambda/myLambdaFunction. In the Log streams tab, choose the log stream corresponding to your function\u0026rsquo;s invocation. You should see output similar to: INIT_START Runtime Version: nodejs:20.v13 Runtime Version ARN: arn:aws:lambda:us-west-2::runtime:e3aaabf6b92ef8755eaae2f4bfdcb7eb8c4536a5e044900570a42bdba7b869d9\rSTART RequestId: aba6c0fc-cf99-49d7-a77d-26d805dacd20 Version: $LATEST\r2023-08-23T22:04:15.809Z 5c012b0a-18f7-4805-b2f6-40912935034a INFO The area is 42\r2023-08-23T22:04:15.810Z aba6c0fc-cf99-49d7-a77d-26d805dacd20 INFO CloudWatch log group: /aws/lambda/myLambdaFunction\rEND RequestId: aba6c0fc-cf99-49d7-a77d-26d805dacd20\rREPORT RequestId: aba6c0fc-cf99-49d7-a77d-26d805dacd20 Duration: 17.77 ms Billed Duration: 18 ms Memory Size: 128 MB Max Memory Used: 67 MB Init Duration: 178.85 ms In this process, you create a test event, execute the function, and verify the output both in the Lambda console and CloudWatch Logs.\nSave Your Function: Click Deploy to save your changes. "
},
{
	"uri": "//localhost:1313/",
	"title": "Setting up an AWS account",
	"tags": [],
	"description": "",
	"content": "BUILD REST API WITH AWS API GATEWAY Overview In this tutorial, you will learn how to create a REST API using AWS API Gateway and AWS Lambda. We will walk you through setting up a basic API that integrates with a Lambda function, demonstrating how these AWS services work together to build scalable and serverless applications. This guide is designed for beginners in AWS cloud computing and covers the essential steps and concepts involved.\nAWS API Gateway AWS API Gateway is a fully managed service that allows you to create, deploy, and manage APIs at any scale. It serves as a gateway to your backend services, such as AWS Lambda functions or other AWS services. API Gateway handles tasks like request routing, authorization, and API monitoring.\nAWS Lambda AWS Lambda is a serverless computing service that lets you run code in response to events without provisioning or managing servers. You can write your code in various programming languages, and Lambda automatically manages the compute resources needed to execute it. In this tutorial, Lambda will be used to process requests coming from API Gateway.\nSteps to Create a REST API Create a Lambda Function: Start by creating a Lambda function in the AWS Management Console. This function will handle the logic for processing API requests.\nSet Up API Gateway: Create a new API in API Gateway. Define the resources and methods for your API and link them to the Lambda function you created.\nDeploy the API: After configuring your API, deploy it to a stage. This makes your API accessible to clients over the internet.\nTest Your API: Use tools such as Postman or curl to send requests to your API endpoint and ensure it is working correctly.\nMonitor and Manage: Utilize CloudWatch Logs and Metrics to monitor your API and Lambda function\u0026rsquo;s performance and handle any issues that arise.\nDetailed Steps Creating a Lambda Function Setting Up API Gateway Deploying the API Testing the API Monitoring and Managing Your API Conclusion By completing this tutorial, you will have created a functional REST API integrated with AWS Lambda. This setup demonstrates the advantages of serverless architectures, simplifying the deployment and management of web services.\nThis tutorial assumes a basic understanding of AWS Management Console and REST API concepts. If you\u0026rsquo;re unfamiliar with these topics, consider reviewing introductory materials on AWS and APIs before starting this tutorial.\n"
},
{
	"uri": "//localhost:1313/2-setup-api-gateway/",
	"title": "SETTING UP API GATEWAY",
	"tags": [],
	"description": "",
	"content": "SETTING UP API GATEWAY Overview In this section, you will learn how to set up AWS API Gateway to expose your Lambda function as a REST API. API Gateway allows you to create, deploy, and manage APIs at any scale, enabling your Lambda function to handle HTTP requests and respond to API calls from clients.\nWhat is AWS API Gateway? AWS API Gateway is a fully managed service that simplifies the creation, publication, maintenance, monitoring, and securing of APIs. It acts as an interface between your backend services, such as Lambda functions, and your clients. API Gateway handles tasks such as request routing, authorization, and traffic management.\nPrerequisites Before setting up API Gateway, ensure you have the following:\nAWS Account:\nCreate an AWS account if you don’t already have one. Lambda Function:\nYou should have a Lambda function created and ready to be integrated with API Gateway. Steps to Set Up API Gateway Log in to the AWS Management Console:\nNavigate to the AWS Management Console and log in with your credentials. Navigate to API Gateway:\nIn the AWS Management Console, search for and select API Gateway from the list of services. Create a New API:\nClick on the Create API button. Select REST API to use the advanced features. Define the Resource:\nClick on Actions and choose Create Resource. Provide a name for the resource and click Create Resource. Create a Method:\nSelect the newly created resource. Click on Actions and choose Create Method. Choose the HTTP verb (e.g., GET, POST, PUT, DELETE) and click on the checkmark to create the method. Integrate with Lambda Function:\nIn the Integration type section, select Lambda Function. Enter the name of the Lambda function you want to use. Click Save to link the Lambda function with the API method. Deploy the API:\nClick on Actions and select Deploy API. Choose or create a new deployment stage (e.g., prod or test). Click Deploy to make your API available. Code Example:\nHere is a sample Lambda function code to handle different HTTP methods:\nimport json # Example data data = { \u0026#34;items\u0026#34;: [ {\u0026#34;id\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;Item 1\u0026#34;, \u0026#34;price\u0026#34;: 10.99}, {\u0026#34;id\u0026#34;: 2, \u0026#34;name\u0026#34;: \u0026#34;Item 2\u0026#34;, \u0026#34;price\u0026#34;: 15.99}, {\u0026#34;id\u0026#34;: 3, \u0026#34;name\u0026#34;: \u0026#34;Item 3\u0026#34;, \u0026#34;price\u0026#34;: 20.99}, ] } def lambda_handler(event, context): # Determine the HTTP method of the request http_method = event[\u0026#34;httpMethod\u0026#34;] # Handle GET request if http_method == \u0026#34;GET\u0026#34;: response = { \u0026#34;statusCode\u0026#34;: 200, \u0026#34;body\u0026#34;: json.dumps(data) } return response # Handle POST request elif http_method == \u0026#34;POST\u0026#34;: body = json.loads(event[\u0026#34;body\u0026#34;]) data[\u0026#34;items\u0026#34;].append(body) response = { \u0026#34;statusCode\u0026#34;: 200, \u0026#34;body\u0026#34;: json.dumps(data) } return response # Handle PUT request elif http_method == \u0026#34;PUT\u0026#34;: body = json.loads(event[\u0026#34;body\u0026#34;]) for item in data[\u0026#34;items\u0026#34;]: if item[\u0026#34;id\u0026#34;] == body[\u0026#34;id\u0026#34;]: item.update(body) break response = { \u0026#34;statusCode\u0026#34;: 200, \u0026#34;body\u0026#34;: json.dumps(data) } return response # Handle DELETE request elif http_method == \u0026#34;DELETE\u0026#34;: body = json.loads(event[\u0026#34;body\u0026#34;]) for i, item in enumerate(data[\u0026#34;items\u0026#34;]): if item[\u0026#34;id\u0026#34;] == body[\u0026#34;id\u0026#34;]: del data[\u0026#34;items\u0026#34;][i] break response = { \u0026#34;statusCode\u0026#34;: 200, \u0026#34;body\u0026#34;: json.dumps(data) } return response else: response = { \u0026#34;statusCode\u0026#34;: 405, \u0026#34;body\u0026#34;: json.dumps({\u0026#34;error\u0026#34;: \u0026#34;Method not allowed\u0026#34;}) } return response Testing with Postman:\nUse the generated API endpoint to test your API. Open Postman and send HTTP requests to the invoke URL to verify that the API responds correctly. For GET requests, no request body is needed. For POST, PUT, and DELETE, include appropriate request bodies. Conclusion After setting up and deploying your API, use tools like Postman to ensure it functions as expected. Properly testing your API will help verify that it handles requests correctly and integrates seamlessly with your Lambda function.\n"
},
{
	"uri": "//localhost:1313/3-deploy-api/",
	"title": "DEPLOYING THE API",
	"tags": [],
	"description": "",
	"content": "DEPLOYING THE API Overview In this section, you will learn how to deploy your AWS API Gateway configuration. Deployment makes your API available to clients over the internet, enabling it to process real HTTP requests and interact with your backend services. You\u0026rsquo;ll set up a deployment stage and publish your API to make it accessible.\nWhat is API Deployment? API Deployment refers to the process of making your API configuration available for use. When deploying an API in API Gateway, you create a stage (e.g., dev, test, prod) that provides a URL for clients to access your API endpoints. This stage acts as a snapshot of your API at a specific point in time.\nSteps to Deploy the API Log in to the AWS Management Console:\nGo to the AWS Management Console and sign in with your credentials. Navigate to API Gateway:\nIn the AWS Management Console, search for and select API Gateway from the list of services. Select Your API:\nClick on APIs in the sidebar to view your API list. Select the API you have created and configured previously. Create a Deployment Stage:\nGo to the Stages section on the left-hand menu. Click Create to set up a new deployment stage. Enter a name for your stage (e.g., prod for production or dev for development). Optionally, provide a description and configure stage variables if needed. Click Create to save the stage. Deploy the API:\nIn the Stages section, select the stage you created. Click Deploy API to publish your API to this stage. Choose the deployment stage from the dropdown menu and click Deploy. Review the API Endpoint:\nAfter deployment, API Gateway provides an Invoke URL for your API. This URL is used by clients to access your API. Copy the Invoke URL from the stage details for use in testing. Test the API:\nUse tools like Postman or curl to send requests to the API endpoint. Verify that the requests are processed correctly and that responses meet your expectations. Monitor and Manage:\nUse AWS CloudWatch to monitor API usage and performance. Check CloudWatch Logs for any errors or issues that occur during API requests. Main Content Log in to the AWS Management Console Navigate to API Gateway Select Your API Create a Deployment Stage Deploy the API Review the API Endpoint Test the API Monitor and Manage Conclusion Your API is now deployed and accessible via the provided endpoint URL. Start making real HTTP requests to your API and monitor its performance using CloudWatch. The next step is to ensure your API is secure and optimized for production use.\nRemember to manage and rotate your API keys and access tokens if you are using authentication. Proper security practices help safeguard your API from unauthorized access and potential misuse.\n"
},
{
	"uri": "//localhost:1313/4-test-api/",
	"title": "TESTING THE API",
	"tags": [],
	"description": "",
	"content": "TESTING THE API Overview In this section, you will learn how to test your deployed AWS API Gateway API to ensure it is functioning as expected. Testing verifies that the API endpoints are correctly integrated with your Lambda function and that they respond properly to client requests.\nWhat is API Testing? API Testing involves sending requests to your API endpoints and checking the responses to ensure that they meet your expectations. It helps validate that your API is working correctly and can handle different types of input, including valid and invalid requests.\nSteps to Test Your API Obtain the API Endpoint URL:\nAfter deploying your API, API Gateway provides an Invoke URL. Navigate to the Stages section in the API Gateway console and find the URL for your deployment stage (e.g., https://abc123.execute-api.region.amazonaws.com/prod). Choose a Testing Tool:\nYou can use various tools to test your API, such as: Postman: A popular tool for sending HTTP requests and analyzing responses. cURL: A command-line tool for transferring data with URLs. Browser: For simple GET requests. Send Test Requests:\nUsing Postman: Open Postman and create a new request. Set the request method (GET, POST, etc.) and enter the API endpoint URL. If applicable, add request headers, query parameters, or a request body. Click Send to execute the request and review the response. Using cURL: Open a terminal and use the curl command to send a request. For example: curl -X GET \u0026#34;https://abc123.execute-api.region.amazonaws.com/prod/hello\u0026#34; Review the response directly in the terminal. Verify the Response:\nCheck that the API returns the expected status code (e.g., 200 OK for successful requests). Validate the response body to ensure it matches the expected output from your Lambda function. Test different scenarios, including edge cases and error conditions, to ensure the API handles all cases properly. Debug Issues:\nIf you encounter unexpected results, check the following: CloudWatch Logs: Inspect the logs for your Lambda function in CloudWatch to see any errors or debug information. API Gateway Logs: Enable logging in API Gateway to capture request and response data. Lambda Configuration: Ensure your Lambda function is correctly configured and has the appropriate permissions. Document Your Tests:\nRecord the test cases you have executed, including the requests made and the responses received. Note any issues discovered and steps taken to resolve them. Main Content Obtain the API Endpoint URL Choose a Testing Tool Send Test Requests Verify the Response Debug Issues Document Your Tests Conclusion Testing is a crucial step to ensure that your API is functioning correctly and meets your requirements. By thoroughly testing your API, you can identify and resolve issues before your API is used in production. The final step involves monitoring and maintaining your API to ensure ongoing reliability and performance.\nBe thorough in your testing to cover a range of scenarios and edge cases. Proper testing helps ensure that your API performs well under various conditions and provides a good experience for its users.\n"
},
{
	"uri": "//localhost:1313/5-monitor-api/",
	"title": "Monitoring and Managing Your API",
	"tags": [],
	"description": "",
	"content": "MONITORING AND MANAGING YOUR API Overview In this section, you will learn how to effectively monitor and manage your AWS API Gateway API to ensure its reliability and performance. Proper monitoring helps you detect and address issues proactively, while effective management ensures smooth operation and scalability.\nWhat is API Monitoring and Management? API Monitoring involves tracking the performance and health of your API, including metrics such as response times, error rates, and request volumes. API Management includes tasks such as updating configurations, scaling resources, and handling security.\nSteps to Monitor Your API Enable CloudWatch Metrics:\nAWS API Gateway automatically sends metrics to Amazon CloudWatch. Navigate to the CloudWatch console to view metrics such as 4XXError, 5XXError, Latency, and Count. Set up CloudWatch Alarms to receive notifications when metrics exceed specified thresholds. Review CloudWatch Logs:\nEnable logging in the API Gateway settings to capture detailed request and response data. Check the CloudWatch logs to troubleshoot errors and understand API usage patterns. Analyze API Gateway Dashboard:\nUse the API Gateway Console to view built-in dashboards displaying traffic patterns, latency, and error rates. Regularly review these metrics to ensure your API is performing optimally. Set Up Alerts:\nCreate CloudWatch Alarms to alert you of issues like high error rates or latency spikes. Configure alerts to send notifications via Amazon SNS (Simple Notification Service) or other channels. Steps to Manage Your API Update API Configurations:\nModify API settings such as routes, methods, and integrations. Use the API Gateway Console to deploy changes and ensure they apply to the appropriate stages. Handle API Versions:\nManage different API versions using stages and deployments. Create new stages for version updates (e.g., v1, v2) and deprecate old versions as needed. Scale API Resources:\nAdjust throughput settings in API Gateway to handle varying loads. Monitor usage and scale your Lambda function or other backend services accordingly. Secure Your API:\nImplement security best practices such as API keys, OAuth tokens, and IP whitelisting. Regularly review and update your API’s security settings to protect against unauthorized access. Document Changes:\nKeep detailed records of changes made to API configurations and management practices. Document updates and version changes to track your API’s evolution. Main Content Enable CloudWatch Metrics Review CloudWatch Logs Analyze API Gateway Dashboard Set Up Alerts Update API Configurations Handle API Versions Scale API Resources Secure Your API Document Changes Conclusion Monitoring and managing your API is crucial for maintaining its reliability and performance. By using CloudWatch, analyzing metrics, handling configurations, and securing your API, you ensure it operates smoothly and effectively meets your users\u0026rsquo; needs.\nRegular monitoring and proactive management help prevent issues and optimize API performance. Keep your API secure and up-to-date to provide a robust and reliable service.\n"
},
{
	"uri": "//localhost:1313/8-cleanup/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "We will take the following steps to delete the resources we created in this exercise.\nDelete Crawler Go to AWS Glue Click Crawlers. Tick the crawler we created, click Action then choose Delete crawler. Navigate to Databases. Tick the transactions database, then click Delete. Delete Glue ETL Navigate to ETL Jobs. Tick DE ETL job, then click Actions, choose Delete job(s). Delete Lambda function Go to Lambda\nTick our function, then click Actions, choose Delete.\nGo to EventBridge\nNavigate to Schedules. Choose our daily-trigger function, then click Delete. Delete RDS instance. Go to RDS\nNavigate to Databases, tick de-mysql-instance, then click Actions, choose Delete.\nTick like this image, then click Delete.\nNavigate to Subnet groups. Tick de-mysql-instance-subnet-group, then click Delete. Delete EC2 Instance Go to EC2 service management console\nClick Instances. Select our instance, click Instance state, then click Terminate (delete) instance. Delete VPC Go to VPC console\nClick Your VPCs. Select de-vpc, click Actions, then Delete VPC.\nDelete IAM roles Go to IAM\nNavigate to Roles. Delete these roles we created.\n"
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]